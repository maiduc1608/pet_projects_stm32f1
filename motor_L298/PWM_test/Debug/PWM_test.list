
PWM_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002b0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000014  080003e0  080003e0  000103e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080003f4  080003f4  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  080003f4  080003f4  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003f4  080003f4  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003f4  080003f4  000103f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003f8  080003f8  000103f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  080003fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000030  0800042c  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  0800042c  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000276  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000010c  00000000  00000000  00020312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000058  00000000  00000000  00020420  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000039  00000000  00000000  00020478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f52  00000000  00000000  000204b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000054a  00000000  00000000  00021403  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003c7f  00000000  00000000  0002194d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000b0  00000000  00000000  000255cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0002567c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000030 	.word	0x20000030
 800014c:	00000000 	.word	0x00000000
 8000150:	080003c8 	.word	0x080003c8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000034 	.word	0x20000034
 800016c:	080003c8 	.word	0x080003c8

08000170 <setDutyCircle>:

void delay(uint32_t d){
		for(int i=0; i<d*2000;i++);
	}

void setDutyCircle(uint32_t d){
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
		//set duty by percent of ARR value.
		*TIM3_CCR1 = d;
 8000178:	4b04      	ldr	r3, [pc, #16]	; (800018c <setDutyCircle+0x1c>)
 800017a:	681b      	ldr	r3, [r3, #0]
 800017c:	687a      	ldr	r2, [r7, #4]
 800017e:	601a      	str	r2, [r3, #0]
	}
 8000180:	bf00      	nop
 8000182:	370c      	adds	r7, #12
 8000184:	46bd      	mov	sp, r7
 8000186:	bc80      	pop	{r7}
 8000188:	4770      	bx	lr
 800018a:	bf00      	nop
 800018c:	2000002c 	.word	0x2000002c

08000190 <main>:

int main(void){
 8000190:	b5b0      	push	{r4, r5, r7, lr}
 8000192:	b08c      	sub	sp, #48	; 0x30
 8000194:	af00      	add	r7, sp, #0
	*RCC_APB2ENR |= 0x04; //supply clock for GPIOA
 8000196:	4b58      	ldr	r3, [pc, #352]	; (80002f8 <main+0x168>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	681a      	ldr	r2, [r3, #0]
 800019c:	4b56      	ldr	r3, [pc, #344]	; (80002f8 <main+0x168>)
 800019e:	681b      	ldr	r3, [r3, #0]
 80001a0:	f042 0204 	orr.w	r2, r2, #4
 80001a4:	601a      	str	r2, [r3, #0]

	*RCC_APB1ENR |= 0x02; //supply clock for TIM3
 80001a6:	4b55      	ldr	r3, [pc, #340]	; (80002fc <main+0x16c>)
 80001a8:	681b      	ldr	r3, [r3, #0]
 80001aa:	681a      	ldr	r2, [r3, #0]
 80001ac:	4b53      	ldr	r3, [pc, #332]	; (80002fc <main+0x16c>)
 80001ae:	681b      	ldr	r3, [r3, #0]
 80001b0:	f042 0202 	orr.w	r2, r2, #2
 80001b4:	601a      	str	r2, [r3, #0]

	//configure output A6, input A0, A4.
	*GPIOA_CRL &= 0x4A464446;
 80001b6:	4b52      	ldr	r3, [pc, #328]	; (8000300 <main+0x170>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	6819      	ldr	r1, [r3, #0]
 80001bc:	4b50      	ldr	r3, [pc, #320]	; (8000300 <main+0x170>)
 80001be:	681a      	ldr	r2, [r3, #0]
 80001c0:	4b50      	ldr	r3, [pc, #320]	; (8000304 <main+0x174>)
 80001c2:	400b      	ands	r3, r1
 80001c4:	6013      	str	r3, [r2, #0]
	*GPIOA_CRL |= 0x4A464446;
 80001c6:	4b4e      	ldr	r3, [pc, #312]	; (8000300 <main+0x170>)
 80001c8:	681b      	ldr	r3, [r3, #0]
 80001ca:	6819      	ldr	r1, [r3, #0]
 80001cc:	4b4c      	ldr	r3, [pc, #304]	; (8000300 <main+0x170>)
 80001ce:	681a      	ldr	r2, [r3, #0]
 80001d0:	4b4c      	ldr	r3, [pc, #304]	; (8000304 <main+0x174>)
 80001d2:	430b      	orrs	r3, r1
 80001d4:	6013      	str	r3, [r2, #0]
	

	*RCC_CR |= 0x01000000; // set PLL as internal clock.(72MHz)
 80001d6:	4b4c      	ldr	r3, [pc, #304]	; (8000308 <main+0x178>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	4b4a      	ldr	r3, [pc, #296]	; (8000308 <main+0x178>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80001e4:	601a      	str	r2, [r3, #0]

	//configure PWM.
	*TIM3_PSC = 72-1;	//set prescaler.
 80001e6:	4b49      	ldr	r3, [pc, #292]	; (800030c <main+0x17c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	2247      	movs	r2, #71	; 0x47
 80001ec:	601a      	str	r2, [r3, #0]
	*TIM3_ARR = 1000-1;	//set the period of auto reload register.
 80001ee:	4b48      	ldr	r3, [pc, #288]	; (8000310 <main+0x180>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80001f6:	601a      	str	r2, [r3, #0]
	*TIM3_CCMR1 &= 0x0068;
 80001f8:	4b46      	ldr	r3, [pc, #280]	; (8000314 <main+0x184>)
 80001fa:	681b      	ldr	r3, [r3, #0]
 80001fc:	681a      	ldr	r2, [r3, #0]
 80001fe:	4b45      	ldr	r3, [pc, #276]	; (8000314 <main+0x184>)
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	f002 0268 	and.w	r2, r2, #104	; 0x68
 8000206:	601a      	str	r2, [r3, #0]
	*TIM3_CCMR1 |= 0x068;	//choose PWM mode.
 8000208:	4b42      	ldr	r3, [pc, #264]	; (8000314 <main+0x184>)
 800020a:	681b      	ldr	r3, [r3, #0]
 800020c:	681a      	ldr	r2, [r3, #0]
 800020e:	4b41      	ldr	r3, [pc, #260]	; (8000314 <main+0x184>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 8000216:	601a      	str	r2, [r3, #0]

	*TIM3_CR1 &= 0x01;
 8000218:	4b3f      	ldr	r3, [pc, #252]	; (8000318 <main+0x188>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	681a      	ldr	r2, [r3, #0]
 800021e:	4b3e      	ldr	r3, [pc, #248]	; (8000318 <main+0x188>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	f002 0201 	and.w	r2, r2, #1
 8000226:	601a      	str	r2, [r3, #0]
	*TIM3_CR1 |= 0x01; //enable counter.
 8000228:	4b3b      	ldr	r3, [pc, #236]	; (8000318 <main+0x188>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	681a      	ldr	r2, [r3, #0]
 800022e:	4b3a      	ldr	r3, [pc, #232]	; (8000318 <main+0x188>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	f042 0201 	orr.w	r2, r2, #1
 8000236:	601a      	str	r2, [r3, #0]

	*TIM3_EGR |=0x01;
 8000238:	4b38      	ldr	r3, [pc, #224]	; (800031c <main+0x18c>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	681a      	ldr	r2, [r3, #0]
 800023e:	4b37      	ldr	r3, [pc, #220]	; (800031c <main+0x18c>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	f042 0201 	orr.w	r2, r2, #1
 8000246:	601a      	str	r2, [r3, #0]
	*TIM3_CCER |= 0x01; //enable OC1 of TIM3.
 8000248:	4b35      	ldr	r3, [pc, #212]	; (8000320 <main+0x190>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	681a      	ldr	r2, [r3, #0]
 800024e:	4b34      	ldr	r3, [pc, #208]	; (8000320 <main+0x190>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	f042 0201 	orr.w	r2, r2, #1
 8000256:	601a      	str	r2, [r3, #0]

	uint32_t level=0;
 8000258:	2300      	movs	r3, #0
 800025a:	62fb      	str	r3, [r7, #44]	; 0x2c
	uint32_t checkPress=0;
 800025c:	2300      	movs	r3, #0
 800025e:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t preCheckPress=0;
 8000260:	2300      	movs	r3, #0
 8000262:	627b      	str	r3, [r7, #36]	; 0x24
	uint32_t pinDutyValue = 0x00000001;
 8000264:	2301      	movs	r3, #1
 8000266:	61bb      	str	r3, [r7, #24]
	uint32_t pinOnOffValue = 0x00000010;
 8000268:	2310      	movs	r3, #16
 800026a:	617b      	str	r3, [r7, #20]
	uint32_t checkOnOff=0;
 800026c:	2300      	movs	r3, #0
 800026e:	623b      	str	r3, [r7, #32]
	uint32_t preCheckOnOff=0;
 8000270:	2300      	movs	r3, #0
 8000272:	61fb      	str	r3, [r7, #28]
	int duty[] = {0, 400, 570, 750, 900}; 	//configure 5 levels for duty circle.
 8000274:	4b2b      	ldr	r3, [pc, #172]	; (8000324 <main+0x194>)
 8000276:	463c      	mov	r4, r7
 8000278:	461d      	mov	r5, r3
 800027a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800027c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800027e:	682b      	ldr	r3, [r5, #0]
 8000280:	6023      	str	r3, [r4, #0]

	setDutyCircle(0); //initialize duty.
 8000282:	2000      	movs	r0, #0
 8000284:	f7ff ff74 	bl	8000170 <setDutyCircle>

	while(1){
		//check: if input from PA0 is high ->turn on and change duty.
		if(((*GPIOA_IDR)&pinDutyValue)==pinDutyValue) {
 8000288:	4b27      	ldr	r3, [pc, #156]	; (8000328 <main+0x198>)
 800028a:	681b      	ldr	r3, [r3, #0]
 800028c:	681a      	ldr	r2, [r3, #0]
 800028e:	69bb      	ldr	r3, [r7, #24]
 8000290:	4013      	ands	r3, r2
 8000292:	69ba      	ldr	r2, [r7, #24]
 8000294:	429a      	cmp	r2, r3
 8000296:	d10d      	bne.n	80002b4 <main+0x124>
			checkPress=1;
 8000298:	2301      	movs	r3, #1
 800029a:	62bb      	str	r3, [r7, #40]	; 0x28
			if(preCheckPress==0) {
 800029c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d10a      	bne.n	80002b8 <main+0x128>
				level++;
 80002a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002a4:	3301      	adds	r3, #1
 80002a6:	62fb      	str	r3, [r7, #44]	; 0x2c
				if(level==5) level=1; //set 4 levels of motor speed.
 80002a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002aa:	2b05      	cmp	r3, #5
 80002ac:	d104      	bne.n	80002b8 <main+0x128>
 80002ae:	2301      	movs	r3, #1
 80002b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002b2:	e001      	b.n	80002b8 <main+0x128>
			}
		}
		else {
			checkPress = 0;
 80002b4:	2300      	movs	r3, #0
 80002b6:	62bb      	str	r3, [r7, #40]	; 0x28
		}

		//check: if input from PA4 is high -> turn off.
		if(((*GPIOA_IDR)&pinOnOffValue)==pinOnOffValue) {
 80002b8:	4b1b      	ldr	r3, [pc, #108]	; (8000328 <main+0x198>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	697b      	ldr	r3, [r7, #20]
 80002c0:	4013      	ands	r3, r2
 80002c2:	697a      	ldr	r2, [r7, #20]
 80002c4:	429a      	cmp	r2, r3
 80002c6:	d107      	bne.n	80002d8 <main+0x148>
			checkOnOff=1;
 80002c8:	2301      	movs	r3, #1
 80002ca:	623b      	str	r3, [r7, #32]
			if(preCheckOnOff==0){
 80002cc:	69fb      	ldr	r3, [r7, #28]
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d104      	bne.n	80002dc <main+0x14c>
				level=0;
 80002d2:	2300      	movs	r3, #0
 80002d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80002d6:	e001      	b.n	80002dc <main+0x14c>
			}
		}
		else {
			checkOnOff=0;
 80002d8:	2300      	movs	r3, #0
 80002da:	623b      	str	r3, [r7, #32]
		}
		preCheckOnOff = checkOnOff;
 80002dc:	6a3b      	ldr	r3, [r7, #32]
 80002de:	61fb      	str	r3, [r7, #28]
		preCheckPress = checkPress;
 80002e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80002e2:	627b      	str	r3, [r7, #36]	; 0x24
		setDutyCircle(duty[level]);
 80002e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80002e6:	009b      	lsls	r3, r3, #2
 80002e8:	3330      	adds	r3, #48	; 0x30
 80002ea:	443b      	add	r3, r7
 80002ec:	f853 3c30 	ldr.w	r3, [r3, #-48]
 80002f0:	4618      	mov	r0, r3
 80002f2:	f7ff ff3d 	bl	8000170 <setDutyCircle>
		if(((*GPIOA_IDR)&pinDutyValue)==pinDutyValue) {
 80002f6:	e7c7      	b.n	8000288 <main+0xf8>
 80002f8:	20000000 	.word	0x20000000
 80002fc:	20000004 	.word	0x20000004
 8000300:	2000000c 	.word	0x2000000c
 8000304:	4a464446 	.word	0x4a464446
 8000308:	20000008 	.word	0x20000008
 800030c:	20000018 	.word	0x20000018
 8000310:	2000001c 	.word	0x2000001c
 8000314:	20000020 	.word	0x20000020
 8000318:	20000014 	.word	0x20000014
 800031c:	20000028 	.word	0x20000028
 8000320:	20000024 	.word	0x20000024
 8000324:	080003e0 	.word	0x080003e0
 8000328:	20000010 	.word	0x20000010

0800032c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800032c:	480d      	ldr	r0, [pc, #52]	; (8000364 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800032e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000330:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000334:	480c      	ldr	r0, [pc, #48]	; (8000368 <LoopForever+0x6>)
  ldr r1, =_edata
 8000336:	490d      	ldr	r1, [pc, #52]	; (800036c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000338:	4a0d      	ldr	r2, [pc, #52]	; (8000370 <LoopForever+0xe>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800033c:	e002      	b.n	8000344 <LoopCopyDataInit>

0800033e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800033e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000342:	3304      	adds	r3, #4

08000344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000348:	d3f9      	bcc.n	800033e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034a:	4a0a      	ldr	r2, [pc, #40]	; (8000374 <LoopForever+0x12>)
  ldr r4, =_ebss
 800034c:	4c0a      	ldr	r4, [pc, #40]	; (8000378 <LoopForever+0x16>)
  movs r3, #0
 800034e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000350:	e001      	b.n	8000356 <LoopFillZerobss>

08000352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000354:	3204      	adds	r2, #4

08000356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000358:	d3fb      	bcc.n	8000352 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035a:	f000 f811 	bl	8000380 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800035e:	f7ff ff17 	bl	8000190 <main>

08000362 <LoopForever>:

LoopForever:
  b LoopForever
 8000362:	e7fe      	b.n	8000362 <LoopForever>
  ldr   r0, =_estack
 8000364:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000368:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800036c:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 8000370:	080003fc 	.word	0x080003fc
  ldr r2, =_sbss
 8000374:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 8000378:	2000004c 	.word	0x2000004c

0800037c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800037c:	e7fe      	b.n	800037c <ADC1_2_IRQHandler>
	...

08000380 <__libc_init_array>:
 8000380:	b570      	push	{r4, r5, r6, lr}
 8000382:	2600      	movs	r6, #0
 8000384:	4d0c      	ldr	r5, [pc, #48]	; (80003b8 <__libc_init_array+0x38>)
 8000386:	4c0d      	ldr	r4, [pc, #52]	; (80003bc <__libc_init_array+0x3c>)
 8000388:	1b64      	subs	r4, r4, r5
 800038a:	10a4      	asrs	r4, r4, #2
 800038c:	42a6      	cmp	r6, r4
 800038e:	d109      	bne.n	80003a4 <__libc_init_array+0x24>
 8000390:	f000 f81a 	bl	80003c8 <_init>
 8000394:	2600      	movs	r6, #0
 8000396:	4d0a      	ldr	r5, [pc, #40]	; (80003c0 <__libc_init_array+0x40>)
 8000398:	4c0a      	ldr	r4, [pc, #40]	; (80003c4 <__libc_init_array+0x44>)
 800039a:	1b64      	subs	r4, r4, r5
 800039c:	10a4      	asrs	r4, r4, #2
 800039e:	42a6      	cmp	r6, r4
 80003a0:	d105      	bne.n	80003ae <__libc_init_array+0x2e>
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80003a8:	4798      	blx	r3
 80003aa:	3601      	adds	r6, #1
 80003ac:	e7ee      	b.n	800038c <__libc_init_array+0xc>
 80003ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b2:	4798      	blx	r3
 80003b4:	3601      	adds	r6, #1
 80003b6:	e7f2      	b.n	800039e <__libc_init_array+0x1e>
 80003b8:	080003f4 	.word	0x080003f4
 80003bc:	080003f4 	.word	0x080003f4
 80003c0:	080003f4 	.word	0x080003f4
 80003c4:	080003f8 	.word	0x080003f8

080003c8 <_init>:
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	bf00      	nop
 80003cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ce:	bc08      	pop	{r3}
 80003d0:	469e      	mov	lr, r3
 80003d2:	4770      	bx	lr

080003d4 <_fini>:
 80003d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003d6:	bf00      	nop
 80003d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003da:	bc08      	pop	{r3}
 80003dc:	469e      	mov	lr, r3
 80003de:	4770      	bx	lr
