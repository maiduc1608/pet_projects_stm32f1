
motor_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001b0  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080002e0  080002e0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080002e0  080002e0  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  080002e0  080002e0  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  080002e0  080002e0  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080002e0  080002e0  000102e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080002e4  080002e4  000102e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  080002e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000020  08000308  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000003c  08000308  0002003c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY
 13 .debug_info   000001d2  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000000fd  00000000  00000000  0002025e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000058  00000000  00000000  00020360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000039  00000000  00000000  000203b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00000f52  00000000  00000000  000203f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000004f0  00000000  00000000  00021343  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00003c09  00000000  00000000  00021833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000000a8  00000000  00000000  0002543c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000254e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	080002c8 	.word	0x080002c8

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	080002c8 	.word	0x080002c8

08000170 <setDutyCycle>:
uint32_t *TIM2_PSC = (uint32_t*)0x40000028;
uint32_t *TIM2_CR1 = (uint32_t*)0x40000000;
uint32_t *TIM2_CCER = (uint32_t*)0x40000020;
uint32_t *TIM2_CCMR1 = (uint32_t*)0x40000018;

void setDutyCycle(uint16_t dutyCycle) {
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
    *TIM2_CCR2 = dutyCycle;
 800017a:	4b04      	ldr	r3, [pc, #16]	; (800018c <setDutyCycle+0x1c>)
 800017c:	681b      	ldr	r3, [r3, #0]
 800017e:	88fa      	ldrh	r2, [r7, #6]
 8000180:	601a      	str	r2, [r3, #0]
}
 8000182:	bf00      	nop
 8000184:	370c      	adds	r7, #12
 8000186:	46bd      	mov	sp, r7
 8000188:	bc80      	pop	{r7}
 800018a:	4770      	bx	lr
 800018c:	2000000c 	.word	0x2000000c

08000190 <main>:
void delay(int d ) {
    for (volatile uint32_t j = 0; j < d*2000; j++) {
        // Delay
    }
}
int main(void) {
 8000190:	b580      	push	{r7, lr}
 8000192:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA
    *RCC_APB2ENR |= 0x04;
 8000194:	4b1e      	ldr	r3, [pc, #120]	; (8000210 <main+0x80>)
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	681a      	ldr	r2, [r3, #0]
 800019a:	4b1d      	ldr	r3, [pc, #116]	; (8000210 <main+0x80>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	f042 0204 	orr.w	r2, r2, #4
 80001a2:	601a      	str	r2, [r3, #0]

    // Configure PA1 to alternate function output push-pull (Mode: 10)
    *GPIOA_CRL &= 0xFFFFF0FF; // Clear bits 12-15
 80001a4:	4b1b      	ldr	r3, [pc, #108]	; (8000214 <main+0x84>)
 80001a6:	681b      	ldr	r3, [r3, #0]
 80001a8:	681a      	ldr	r2, [r3, #0]
 80001aa:	4b1a      	ldr	r3, [pc, #104]	; (8000214 <main+0x84>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00
 80001b2:	601a      	str	r2, [r3, #0]
    *GPIOA_CRL |= 0x00000020; // Set bits 9-10 for mode 10
 80001b4:	4b17      	ldr	r3, [pc, #92]	; (8000214 <main+0x84>)
 80001b6:	681b      	ldr	r3, [r3, #0]
 80001b8:	681a      	ldr	r2, [r3, #0]
 80001ba:	4b16      	ldr	r3, [pc, #88]	; (8000214 <main+0x84>)
 80001bc:	681b      	ldr	r3, [r3, #0]
 80001be:	f042 0220 	orr.w	r2, r2, #32
 80001c2:	601a      	str	r2, [r3, #0]

    // Configure PWM
    *TIM2_ARR = 1000 - 1;  // Period of PWM signal
 80001c4:	4b14      	ldr	r3, [pc, #80]	; (8000218 <main+0x88>)
 80001c6:	681b      	ldr	r3, [r3, #0]
 80001c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80001cc:	601a      	str	r2, [r3, #0]
    *TIM2_PSC = 72 - 1;     // Prescaler
 80001ce:	4b13      	ldr	r3, [pc, #76]	; (800021c <main+0x8c>)
 80001d0:	681b      	ldr	r3, [r3, #0]
 80001d2:	2247      	movs	r2, #71	; 0x47
 80001d4:	601a      	str	r2, [r3, #0]
    *TIM2_CCER |= 0x00000010;  // Enable capture/compare 2 output
 80001d6:	4b12      	ldr	r3, [pc, #72]	; (8000220 <main+0x90>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	681a      	ldr	r2, [r3, #0]
 80001dc:	4b10      	ldr	r3, [pc, #64]	; (8000220 <main+0x90>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	f042 0210 	orr.w	r2, r2, #16
 80001e4:	601a      	str	r2, [r3, #0]
    *TIM2_CCMR1 |= 0x0060;     // PWM mode 1, preload enable
 80001e6:	4b0f      	ldr	r3, [pc, #60]	; (8000224 <main+0x94>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	681a      	ldr	r2, [r3, #0]
 80001ec:	4b0d      	ldr	r3, [pc, #52]	; (8000224 <main+0x94>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80001f4:	601a      	str	r2, [r3, #0]
    *TIM2_CR1 |= 0x01;         // Enable TIM2
 80001f6:	4b0c      	ldr	r3, [pc, #48]	; (8000228 <main+0x98>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	4b0a      	ldr	r3, [pc, #40]	; (8000228 <main+0x98>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f042 0201 	orr.w	r2, r2, #1
 8000204:	601a      	str	r2, [r3, #0]

    setDutyCycle(500);  // Set duty cycle to 50%
 8000206:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800020a:	f7ff ffb1 	bl	8000170 <setDutyCycle>

    while (1) {
 800020e:	e7fe      	b.n	800020e <main+0x7e>
 8000210:	20000000 	.word	0x20000000
 8000214:	20000004 	.word	0x20000004
 8000218:	20000008 	.word	0x20000008
 800021c:	20000010 	.word	0x20000010
 8000220:	20000018 	.word	0x20000018
 8000224:	2000001c 	.word	0x2000001c
 8000228:	20000014 	.word	0x20000014

0800022c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800022c:	480d      	ldr	r0, [pc, #52]	; (8000264 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800022e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000230:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000234:	480c      	ldr	r0, [pc, #48]	; (8000268 <LoopForever+0x6>)
  ldr r1, =_edata
 8000236:	490d      	ldr	r1, [pc, #52]	; (800026c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000238:	4a0d      	ldr	r2, [pc, #52]	; (8000270 <LoopForever+0xe>)
  movs r3, #0
 800023a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800023c:	e002      	b.n	8000244 <LoopCopyDataInit>

0800023e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800023e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000240:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000242:	3304      	adds	r3, #4

08000244 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000244:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000246:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000248:	d3f9      	bcc.n	800023e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800024a:	4a0a      	ldr	r2, [pc, #40]	; (8000274 <LoopForever+0x12>)
  ldr r4, =_ebss
 800024c:	4c0a      	ldr	r4, [pc, #40]	; (8000278 <LoopForever+0x16>)
  movs r3, #0
 800024e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000250:	e001      	b.n	8000256 <LoopFillZerobss>

08000252 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000252:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000254:	3204      	adds	r2, #4

08000256 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000256:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000258:	d3fb      	bcc.n	8000252 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800025a:	f000 f811 	bl	8000280 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800025e:	f7ff ff97 	bl	8000190 <main>

08000262 <LoopForever>:

LoopForever:
  b LoopForever
 8000262:	e7fe      	b.n	8000262 <LoopForever>
  ldr   r0, =_estack
 8000264:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8000268:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800026c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000270:	080002e8 	.word	0x080002e8
  ldr r2, =_sbss
 8000274:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000278:	2000003c 	.word	0x2000003c

0800027c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800027c:	e7fe      	b.n	800027c <ADC1_2_IRQHandler>
	...

08000280 <__libc_init_array>:
 8000280:	b570      	push	{r4, r5, r6, lr}
 8000282:	2600      	movs	r6, #0
 8000284:	4d0c      	ldr	r5, [pc, #48]	; (80002b8 <__libc_init_array+0x38>)
 8000286:	4c0d      	ldr	r4, [pc, #52]	; (80002bc <__libc_init_array+0x3c>)
 8000288:	1b64      	subs	r4, r4, r5
 800028a:	10a4      	asrs	r4, r4, #2
 800028c:	42a6      	cmp	r6, r4
 800028e:	d109      	bne.n	80002a4 <__libc_init_array+0x24>
 8000290:	f000 f81a 	bl	80002c8 <_init>
 8000294:	2600      	movs	r6, #0
 8000296:	4d0a      	ldr	r5, [pc, #40]	; (80002c0 <__libc_init_array+0x40>)
 8000298:	4c0a      	ldr	r4, [pc, #40]	; (80002c4 <__libc_init_array+0x44>)
 800029a:	1b64      	subs	r4, r4, r5
 800029c:	10a4      	asrs	r4, r4, #2
 800029e:	42a6      	cmp	r6, r4
 80002a0:	d105      	bne.n	80002ae <__libc_init_array+0x2e>
 80002a2:	bd70      	pop	{r4, r5, r6, pc}
 80002a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002a8:	4798      	blx	r3
 80002aa:	3601      	adds	r6, #1
 80002ac:	e7ee      	b.n	800028c <__libc_init_array+0xc>
 80002ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80002b2:	4798      	blx	r3
 80002b4:	3601      	adds	r6, #1
 80002b6:	e7f2      	b.n	800029e <__libc_init_array+0x1e>
 80002b8:	080002e0 	.word	0x080002e0
 80002bc:	080002e0 	.word	0x080002e0
 80002c0:	080002e0 	.word	0x080002e0
 80002c4:	080002e4 	.word	0x080002e4

080002c8 <_init>:
 80002c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002ca:	bf00      	nop
 80002cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002ce:	bc08      	pop	{r3}
 80002d0:	469e      	mov	lr, r3
 80002d2:	4770      	bx	lr

080002d4 <_fini>:
 80002d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002d6:	bf00      	nop
 80002d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002da:	bc08      	pop	{r3}
 80002dc:	469e      	mov	lr, r3
 80002de:	4770      	bx	lr
